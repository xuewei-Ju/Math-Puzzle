boy, girl = 20, 10

# 人数は+1の理由は実際の人数は0から計算すべきからです。
# 20人の場合、0〜20の21通りのパターンを考えないといけない。
boy, girl = boy + 1, girl + 1

# 全要素を0に初期化
ary = Array.new(boy * girl){0}

ary[0] = 1

# ここのアルゴリズムは有名な経路問題をベースに考える
# 格子状の道を作り、一番左下の格子から一番右上の格子に行くには何通りがあるか
# の計算について、各格子の通り数は左格子の数字と下格子の数字の和になる。
# 今回の問題は11X21の方格子の図を書き、男女同数の格子を除き（０とする）、
# 一番右上の格子の数字を求めればよい。

girl.times{|g|
	boy.times{|b|
		if (b != g) && (boy - b != girl - g) then  # 男女同数の格子は計算しない
			# 左の格子の数字を足し算
			ary[b + boy * g] += ary[b - 1 + boy * g] if b > 0
			# print "ary[", b+boy*g, "]= ", ary[b+boy*g], "\n"

			# 下の格子の数字を足し算
			ary[b + boy * g] += ary[b + boy * (g - 1)] if g > 0
			print "arg[", b+boy*g, "]= ", ary[b+boy*g], "\n"
		end
	}
}

print "ary[-boy - 1]=", ary[-boy-1]
print "ary[-2]=", ary[-2], "\n"

# -2は一番右上の格子の左側の格子、-1-boyは一番右上の格子の下側の格子
# rubyは-1が末尾の要素、-2は末尾要素の1個前の要素
# -boy-1は一番末尾の要素を１行分の要素を減らす計算
puts ary[-2] + ary[-boy - 1]
